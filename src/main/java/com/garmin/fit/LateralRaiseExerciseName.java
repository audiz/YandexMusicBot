////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Garmin Canada Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2021 Garmin Canada Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.53Release
// Tag = production/akw/21.53.00-0-g1b82aa2b
////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;

import java.util.HashMap;
import java.util.Map;

public class LateralRaiseExerciseName  {
    public static final int _45_DEGREE_CABLE_EXTERNAL_ROTATION = 0;
    public static final int ALTERNATING_LATERAL_RAISE_WITH_STATIC_HOLD = 1;
    public static final int BAR_MUSCLE_UP = 2;
    public static final int BENT_OVER_LATERAL_RAISE = 3;
    public static final int CABLE_DIAGONAL_RAISE = 4;
    public static final int CABLE_FRONT_RAISE = 5;
    public static final int CALORIE_ROW = 6;
    public static final int COMBO_SHOULDER_RAISE = 7;
    public static final int DUMBBELL_DIAGONAL_RAISE = 8;
    public static final int DUMBBELL_V_RAISE = 9;
    public static final int FRONT_RAISE = 10;
    public static final int LEANING_DUMBBELL_LATERAL_RAISE = 11;
    public static final int LYING_DUMBBELL_RAISE = 12;
    public static final int MUSCLE_UP = 13;
    public static final int ONE_ARM_CABLE_LATERAL_RAISE = 14;
    public static final int OVERHAND_GRIP_REAR_LATERAL_RAISE = 15;
    public static final int PLATE_RAISES = 16;
    public static final int RING_DIP = 17;
    public static final int WEIGHTED_RING_DIP = 18;
    public static final int RING_MUSCLE_UP = 19;
    public static final int WEIGHTED_RING_MUSCLE_UP = 20;
    public static final int ROPE_CLIMB = 21;
    public static final int WEIGHTED_ROPE_CLIMB = 22;
    public static final int SCAPTION = 23;
    public static final int SEATED_LATERAL_RAISE = 24;
    public static final int SEATED_REAR_LATERAL_RAISE = 25;
    public static final int SIDE_LYING_LATERAL_RAISE = 26;
    public static final int STANDING_LIFT = 27;
    public static final int SUSPENDED_ROW = 28;
    public static final int UNDERHAND_GRIP_REAR_LATERAL_RAISE = 29;
    public static final int WALL_SLIDE = 30;
    public static final int WEIGHTED_WALL_SLIDE = 31;
    public static final int ARM_CIRCLES = 32;
    public static final int SHAVING_THE_HEAD = 33;
    public static final int INVALID = Fit.UINT16_INVALID;

    private static final Map<Integer, String> stringMap;

    static {
        stringMap = new HashMap<Integer, String>();
        stringMap.put(_45_DEGREE_CABLE_EXTERNAL_ROTATION, "_45_DEGREE_CABLE_EXTERNAL_ROTATION");
        stringMap.put(ALTERNATING_LATERAL_RAISE_WITH_STATIC_HOLD, "ALTERNATING_LATERAL_RAISE_WITH_STATIC_HOLD");
        stringMap.put(BAR_MUSCLE_UP, "BAR_MUSCLE_UP");
        stringMap.put(BENT_OVER_LATERAL_RAISE, "BENT_OVER_LATERAL_RAISE");
        stringMap.put(CABLE_DIAGONAL_RAISE, "CABLE_DIAGONAL_RAISE");
        stringMap.put(CABLE_FRONT_RAISE, "CABLE_FRONT_RAISE");
        stringMap.put(CALORIE_ROW, "CALORIE_ROW");
        stringMap.put(COMBO_SHOULDER_RAISE, "COMBO_SHOULDER_RAISE");
        stringMap.put(DUMBBELL_DIAGONAL_RAISE, "DUMBBELL_DIAGONAL_RAISE");
        stringMap.put(DUMBBELL_V_RAISE, "DUMBBELL_V_RAISE");
        stringMap.put(FRONT_RAISE, "FRONT_RAISE");
        stringMap.put(LEANING_DUMBBELL_LATERAL_RAISE, "LEANING_DUMBBELL_LATERAL_RAISE");
        stringMap.put(LYING_DUMBBELL_RAISE, "LYING_DUMBBELL_RAISE");
        stringMap.put(MUSCLE_UP, "MUSCLE_UP");
        stringMap.put(ONE_ARM_CABLE_LATERAL_RAISE, "ONE_ARM_CABLE_LATERAL_RAISE");
        stringMap.put(OVERHAND_GRIP_REAR_LATERAL_RAISE, "OVERHAND_GRIP_REAR_LATERAL_RAISE");
        stringMap.put(PLATE_RAISES, "PLATE_RAISES");
        stringMap.put(RING_DIP, "RING_DIP");
        stringMap.put(WEIGHTED_RING_DIP, "WEIGHTED_RING_DIP");
        stringMap.put(RING_MUSCLE_UP, "RING_MUSCLE_UP");
        stringMap.put(WEIGHTED_RING_MUSCLE_UP, "WEIGHTED_RING_MUSCLE_UP");
        stringMap.put(ROPE_CLIMB, "ROPE_CLIMB");
        stringMap.put(WEIGHTED_ROPE_CLIMB, "WEIGHTED_ROPE_CLIMB");
        stringMap.put(SCAPTION, "SCAPTION");
        stringMap.put(SEATED_LATERAL_RAISE, "SEATED_LATERAL_RAISE");
        stringMap.put(SEATED_REAR_LATERAL_RAISE, "SEATED_REAR_LATERAL_RAISE");
        stringMap.put(SIDE_LYING_LATERAL_RAISE, "SIDE_LYING_LATERAL_RAISE");
        stringMap.put(STANDING_LIFT, "STANDING_LIFT");
        stringMap.put(SUSPENDED_ROW, "SUSPENDED_ROW");
        stringMap.put(UNDERHAND_GRIP_REAR_LATERAL_RAISE, "UNDERHAND_GRIP_REAR_LATERAL_RAISE");
        stringMap.put(WALL_SLIDE, "WALL_SLIDE");
        stringMap.put(WEIGHTED_WALL_SLIDE, "WEIGHTED_WALL_SLIDE");
        stringMap.put(ARM_CIRCLES, "ARM_CIRCLES");
        stringMap.put(SHAVING_THE_HEAD, "SHAVING_THE_HEAD");
    }


    /**
     * Retrieves the String Representation of the Value
     * @return The string representation of the value, or empty if unknown
     */
    public static String getStringFromValue( Integer value ) {
        if( stringMap.containsKey( value ) ) {
            return stringMap.get( value );
        }

        return "";
    }

    /**
     * Retrieves a value given a string representation
     * @return The value or INVALID if unkwown
     */
    public static Integer getValueFromString( String value ) {
        for( Map.Entry<Integer, String> entry : stringMap.entrySet() ) {
            if( entry.getValue().equals( value ) ) {
                return entry.getKey();
            }
        }

        return INVALID;
    }

}
