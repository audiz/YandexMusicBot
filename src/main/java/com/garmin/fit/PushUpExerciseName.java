////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Garmin Canada Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2021 Garmin Canada Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.53Release
// Tag = production/akw/21.53.00-0-g1b82aa2b
////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;

import java.util.HashMap;
import java.util.Map;

public class PushUpExerciseName  {
    public static final int CHEST_PRESS_WITH_BAND = 0;
    public static final int ALTERNATING_STAGGERED_PUSH_UP = 1;
    public static final int WEIGHTED_ALTERNATING_STAGGERED_PUSH_UP = 2;
    public static final int ALTERNATING_HANDS_MEDICINE_BALL_PUSH_UP = 3;
    public static final int WEIGHTED_ALTERNATING_HANDS_MEDICINE_BALL_PUSH_UP = 4;
    public static final int BOSU_BALL_PUSH_UP = 5;
    public static final int WEIGHTED_BOSU_BALL_PUSH_UP = 6;
    public static final int CLAPPING_PUSH_UP = 7;
    public static final int WEIGHTED_CLAPPING_PUSH_UP = 8;
    public static final int CLOSE_GRIP_MEDICINE_BALL_PUSH_UP = 9;
    public static final int WEIGHTED_CLOSE_GRIP_MEDICINE_BALL_PUSH_UP = 10;
    public static final int CLOSE_HANDS_PUSH_UP = 11;
    public static final int WEIGHTED_CLOSE_HANDS_PUSH_UP = 12;
    public static final int DECLINE_PUSH_UP = 13;
    public static final int WEIGHTED_DECLINE_PUSH_UP = 14;
    public static final int DIAMOND_PUSH_UP = 15;
    public static final int WEIGHTED_DIAMOND_PUSH_UP = 16;
    public static final int EXPLOSIVE_CROSSOVER_PUSH_UP = 17;
    public static final int WEIGHTED_EXPLOSIVE_CROSSOVER_PUSH_UP = 18;
    public static final int EXPLOSIVE_PUSH_UP = 19;
    public static final int WEIGHTED_EXPLOSIVE_PUSH_UP = 20;
    public static final int FEET_ELEVATED_SIDE_TO_SIDE_PUSH_UP = 21;
    public static final int WEIGHTED_FEET_ELEVATED_SIDE_TO_SIDE_PUSH_UP = 22;
    public static final int HAND_RELEASE_PUSH_UP = 23;
    public static final int WEIGHTED_HAND_RELEASE_PUSH_UP = 24;
    public static final int HANDSTAND_PUSH_UP = 25;
    public static final int WEIGHTED_HANDSTAND_PUSH_UP = 26;
    public static final int INCLINE_PUSH_UP = 27;
    public static final int WEIGHTED_INCLINE_PUSH_UP = 28;
    public static final int ISOMETRIC_EXPLOSIVE_PUSH_UP = 29;
    public static final int WEIGHTED_ISOMETRIC_EXPLOSIVE_PUSH_UP = 30;
    public static final int JUDO_PUSH_UP = 31;
    public static final int WEIGHTED_JUDO_PUSH_UP = 32;
    public static final int KNEELING_PUSH_UP = 33;
    public static final int WEIGHTED_KNEELING_PUSH_UP = 34;
    public static final int MEDICINE_BALL_CHEST_PASS = 35;
    public static final int MEDICINE_BALL_PUSH_UP = 36;
    public static final int WEIGHTED_MEDICINE_BALL_PUSH_UP = 37;
    public static final int ONE_ARM_PUSH_UP = 38;
    public static final int WEIGHTED_ONE_ARM_PUSH_UP = 39;
    public static final int WEIGHTED_PUSH_UP = 40;
    public static final int PUSH_UP_AND_ROW = 41;
    public static final int WEIGHTED_PUSH_UP_AND_ROW = 42;
    public static final int PUSH_UP_PLUS = 43;
    public static final int WEIGHTED_PUSH_UP_PLUS = 44;
    public static final int PUSH_UP_WITH_FEET_ON_SWISS_BALL = 45;
    public static final int WEIGHTED_PUSH_UP_WITH_FEET_ON_SWISS_BALL = 46;
    public static final int PUSH_UP_WITH_ONE_HAND_ON_MEDICINE_BALL = 47;
    public static final int WEIGHTED_PUSH_UP_WITH_ONE_HAND_ON_MEDICINE_BALL = 48;
    public static final int SHOULDER_PUSH_UP = 49;
    public static final int WEIGHTED_SHOULDER_PUSH_UP = 50;
    public static final int SINGLE_ARM_MEDICINE_BALL_PUSH_UP = 51;
    public static final int WEIGHTED_SINGLE_ARM_MEDICINE_BALL_PUSH_UP = 52;
    public static final int SPIDERMAN_PUSH_UP = 53;
    public static final int WEIGHTED_SPIDERMAN_PUSH_UP = 54;
    public static final int STACKED_FEET_PUSH_UP = 55;
    public static final int WEIGHTED_STACKED_FEET_PUSH_UP = 56;
    public static final int STAGGERED_HANDS_PUSH_UP = 57;
    public static final int WEIGHTED_STAGGERED_HANDS_PUSH_UP = 58;
    public static final int SUSPENDED_PUSH_UP = 59;
    public static final int WEIGHTED_SUSPENDED_PUSH_UP = 60;
    public static final int SWISS_BALL_PUSH_UP = 61;
    public static final int WEIGHTED_SWISS_BALL_PUSH_UP = 62;
    public static final int SWISS_BALL_PUSH_UP_PLUS = 63;
    public static final int WEIGHTED_SWISS_BALL_PUSH_UP_PLUS = 64;
    public static final int T_PUSH_UP = 65;
    public static final int WEIGHTED_T_PUSH_UP = 66;
    public static final int TRIPLE_STOP_PUSH_UP = 67;
    public static final int WEIGHTED_TRIPLE_STOP_PUSH_UP = 68;
    public static final int WIDE_HANDS_PUSH_UP = 69;
    public static final int WEIGHTED_WIDE_HANDS_PUSH_UP = 70;
    public static final int PARALLETTE_HANDSTAND_PUSH_UP = 71;
    public static final int WEIGHTED_PARALLETTE_HANDSTAND_PUSH_UP = 72;
    public static final int RING_HANDSTAND_PUSH_UP = 73;
    public static final int WEIGHTED_RING_HANDSTAND_PUSH_UP = 74;
    public static final int RING_PUSH_UP = 75;
    public static final int WEIGHTED_RING_PUSH_UP = 76;
    public static final int PUSH_UP = 77;
    public static final int PILATES_PUSHUP = 78;
    public static final int INVALID = Fit.UINT16_INVALID;

    private static final Map<Integer, String> stringMap;

    static {
        stringMap = new HashMap<Integer, String>();
        stringMap.put(CHEST_PRESS_WITH_BAND, "CHEST_PRESS_WITH_BAND");
        stringMap.put(ALTERNATING_STAGGERED_PUSH_UP, "ALTERNATING_STAGGERED_PUSH_UP");
        stringMap.put(WEIGHTED_ALTERNATING_STAGGERED_PUSH_UP, "WEIGHTED_ALTERNATING_STAGGERED_PUSH_UP");
        stringMap.put(ALTERNATING_HANDS_MEDICINE_BALL_PUSH_UP, "ALTERNATING_HANDS_MEDICINE_BALL_PUSH_UP");
        stringMap.put(WEIGHTED_ALTERNATING_HANDS_MEDICINE_BALL_PUSH_UP, "WEIGHTED_ALTERNATING_HANDS_MEDICINE_BALL_PUSH_UP");
        stringMap.put(BOSU_BALL_PUSH_UP, "BOSU_BALL_PUSH_UP");
        stringMap.put(WEIGHTED_BOSU_BALL_PUSH_UP, "WEIGHTED_BOSU_BALL_PUSH_UP");
        stringMap.put(CLAPPING_PUSH_UP, "CLAPPING_PUSH_UP");
        stringMap.put(WEIGHTED_CLAPPING_PUSH_UP, "WEIGHTED_CLAPPING_PUSH_UP");
        stringMap.put(CLOSE_GRIP_MEDICINE_BALL_PUSH_UP, "CLOSE_GRIP_MEDICINE_BALL_PUSH_UP");
        stringMap.put(WEIGHTED_CLOSE_GRIP_MEDICINE_BALL_PUSH_UP, "WEIGHTED_CLOSE_GRIP_MEDICINE_BALL_PUSH_UP");
        stringMap.put(CLOSE_HANDS_PUSH_UP, "CLOSE_HANDS_PUSH_UP");
        stringMap.put(WEIGHTED_CLOSE_HANDS_PUSH_UP, "WEIGHTED_CLOSE_HANDS_PUSH_UP");
        stringMap.put(DECLINE_PUSH_UP, "DECLINE_PUSH_UP");
        stringMap.put(WEIGHTED_DECLINE_PUSH_UP, "WEIGHTED_DECLINE_PUSH_UP");
        stringMap.put(DIAMOND_PUSH_UP, "DIAMOND_PUSH_UP");
        stringMap.put(WEIGHTED_DIAMOND_PUSH_UP, "WEIGHTED_DIAMOND_PUSH_UP");
        stringMap.put(EXPLOSIVE_CROSSOVER_PUSH_UP, "EXPLOSIVE_CROSSOVER_PUSH_UP");
        stringMap.put(WEIGHTED_EXPLOSIVE_CROSSOVER_PUSH_UP, "WEIGHTED_EXPLOSIVE_CROSSOVER_PUSH_UP");
        stringMap.put(EXPLOSIVE_PUSH_UP, "EXPLOSIVE_PUSH_UP");
        stringMap.put(WEIGHTED_EXPLOSIVE_PUSH_UP, "WEIGHTED_EXPLOSIVE_PUSH_UP");
        stringMap.put(FEET_ELEVATED_SIDE_TO_SIDE_PUSH_UP, "FEET_ELEVATED_SIDE_TO_SIDE_PUSH_UP");
        stringMap.put(WEIGHTED_FEET_ELEVATED_SIDE_TO_SIDE_PUSH_UP, "WEIGHTED_FEET_ELEVATED_SIDE_TO_SIDE_PUSH_UP");
        stringMap.put(HAND_RELEASE_PUSH_UP, "HAND_RELEASE_PUSH_UP");
        stringMap.put(WEIGHTED_HAND_RELEASE_PUSH_UP, "WEIGHTED_HAND_RELEASE_PUSH_UP");
        stringMap.put(HANDSTAND_PUSH_UP, "HANDSTAND_PUSH_UP");
        stringMap.put(WEIGHTED_HANDSTAND_PUSH_UP, "WEIGHTED_HANDSTAND_PUSH_UP");
        stringMap.put(INCLINE_PUSH_UP, "INCLINE_PUSH_UP");
        stringMap.put(WEIGHTED_INCLINE_PUSH_UP, "WEIGHTED_INCLINE_PUSH_UP");
        stringMap.put(ISOMETRIC_EXPLOSIVE_PUSH_UP, "ISOMETRIC_EXPLOSIVE_PUSH_UP");
        stringMap.put(WEIGHTED_ISOMETRIC_EXPLOSIVE_PUSH_UP, "WEIGHTED_ISOMETRIC_EXPLOSIVE_PUSH_UP");
        stringMap.put(JUDO_PUSH_UP, "JUDO_PUSH_UP");
        stringMap.put(WEIGHTED_JUDO_PUSH_UP, "WEIGHTED_JUDO_PUSH_UP");
        stringMap.put(KNEELING_PUSH_UP, "KNEELING_PUSH_UP");
        stringMap.put(WEIGHTED_KNEELING_PUSH_UP, "WEIGHTED_KNEELING_PUSH_UP");
        stringMap.put(MEDICINE_BALL_CHEST_PASS, "MEDICINE_BALL_CHEST_PASS");
        stringMap.put(MEDICINE_BALL_PUSH_UP, "MEDICINE_BALL_PUSH_UP");
        stringMap.put(WEIGHTED_MEDICINE_BALL_PUSH_UP, "WEIGHTED_MEDICINE_BALL_PUSH_UP");
        stringMap.put(ONE_ARM_PUSH_UP, "ONE_ARM_PUSH_UP");
        stringMap.put(WEIGHTED_ONE_ARM_PUSH_UP, "WEIGHTED_ONE_ARM_PUSH_UP");
        stringMap.put(WEIGHTED_PUSH_UP, "WEIGHTED_PUSH_UP");
        stringMap.put(PUSH_UP_AND_ROW, "PUSH_UP_AND_ROW");
        stringMap.put(WEIGHTED_PUSH_UP_AND_ROW, "WEIGHTED_PUSH_UP_AND_ROW");
        stringMap.put(PUSH_UP_PLUS, "PUSH_UP_PLUS");
        stringMap.put(WEIGHTED_PUSH_UP_PLUS, "WEIGHTED_PUSH_UP_PLUS");
        stringMap.put(PUSH_UP_WITH_FEET_ON_SWISS_BALL, "PUSH_UP_WITH_FEET_ON_SWISS_BALL");
        stringMap.put(WEIGHTED_PUSH_UP_WITH_FEET_ON_SWISS_BALL, "WEIGHTED_PUSH_UP_WITH_FEET_ON_SWISS_BALL");
        stringMap.put(PUSH_UP_WITH_ONE_HAND_ON_MEDICINE_BALL, "PUSH_UP_WITH_ONE_HAND_ON_MEDICINE_BALL");
        stringMap.put(WEIGHTED_PUSH_UP_WITH_ONE_HAND_ON_MEDICINE_BALL, "WEIGHTED_PUSH_UP_WITH_ONE_HAND_ON_MEDICINE_BALL");
        stringMap.put(SHOULDER_PUSH_UP, "SHOULDER_PUSH_UP");
        stringMap.put(WEIGHTED_SHOULDER_PUSH_UP, "WEIGHTED_SHOULDER_PUSH_UP");
        stringMap.put(SINGLE_ARM_MEDICINE_BALL_PUSH_UP, "SINGLE_ARM_MEDICINE_BALL_PUSH_UP");
        stringMap.put(WEIGHTED_SINGLE_ARM_MEDICINE_BALL_PUSH_UP, "WEIGHTED_SINGLE_ARM_MEDICINE_BALL_PUSH_UP");
        stringMap.put(SPIDERMAN_PUSH_UP, "SPIDERMAN_PUSH_UP");
        stringMap.put(WEIGHTED_SPIDERMAN_PUSH_UP, "WEIGHTED_SPIDERMAN_PUSH_UP");
        stringMap.put(STACKED_FEET_PUSH_UP, "STACKED_FEET_PUSH_UP");
        stringMap.put(WEIGHTED_STACKED_FEET_PUSH_UP, "WEIGHTED_STACKED_FEET_PUSH_UP");
        stringMap.put(STAGGERED_HANDS_PUSH_UP, "STAGGERED_HANDS_PUSH_UP");
        stringMap.put(WEIGHTED_STAGGERED_HANDS_PUSH_UP, "WEIGHTED_STAGGERED_HANDS_PUSH_UP");
        stringMap.put(SUSPENDED_PUSH_UP, "SUSPENDED_PUSH_UP");
        stringMap.put(WEIGHTED_SUSPENDED_PUSH_UP, "WEIGHTED_SUSPENDED_PUSH_UP");
        stringMap.put(SWISS_BALL_PUSH_UP, "SWISS_BALL_PUSH_UP");
        stringMap.put(WEIGHTED_SWISS_BALL_PUSH_UP, "WEIGHTED_SWISS_BALL_PUSH_UP");
        stringMap.put(SWISS_BALL_PUSH_UP_PLUS, "SWISS_BALL_PUSH_UP_PLUS");
        stringMap.put(WEIGHTED_SWISS_BALL_PUSH_UP_PLUS, "WEIGHTED_SWISS_BALL_PUSH_UP_PLUS");
        stringMap.put(T_PUSH_UP, "T_PUSH_UP");
        stringMap.put(WEIGHTED_T_PUSH_UP, "WEIGHTED_T_PUSH_UP");
        stringMap.put(TRIPLE_STOP_PUSH_UP, "TRIPLE_STOP_PUSH_UP");
        stringMap.put(WEIGHTED_TRIPLE_STOP_PUSH_UP, "WEIGHTED_TRIPLE_STOP_PUSH_UP");
        stringMap.put(WIDE_HANDS_PUSH_UP, "WIDE_HANDS_PUSH_UP");
        stringMap.put(WEIGHTED_WIDE_HANDS_PUSH_UP, "WEIGHTED_WIDE_HANDS_PUSH_UP");
        stringMap.put(PARALLETTE_HANDSTAND_PUSH_UP, "PARALLETTE_HANDSTAND_PUSH_UP");
        stringMap.put(WEIGHTED_PARALLETTE_HANDSTAND_PUSH_UP, "WEIGHTED_PARALLETTE_HANDSTAND_PUSH_UP");
        stringMap.put(RING_HANDSTAND_PUSH_UP, "RING_HANDSTAND_PUSH_UP");
        stringMap.put(WEIGHTED_RING_HANDSTAND_PUSH_UP, "WEIGHTED_RING_HANDSTAND_PUSH_UP");
        stringMap.put(RING_PUSH_UP, "RING_PUSH_UP");
        stringMap.put(WEIGHTED_RING_PUSH_UP, "WEIGHTED_RING_PUSH_UP");
        stringMap.put(PUSH_UP, "PUSH_UP");
        stringMap.put(PILATES_PUSHUP, "PILATES_PUSHUP");
    }


    /**
     * Retrieves the String Representation of the Value
     * @return The string representation of the value, or empty if unknown
     */
    public static String getStringFromValue( Integer value ) {
        if( stringMap.containsKey( value ) ) {
            return stringMap.get( value );
        }

        return "";
    }

    /**
     * Retrieves a value given a string representation
     * @return The value or INVALID if unkwown
     */
    public static Integer getValueFromString( String value ) {
        for( Map.Entry<Integer, String> entry : stringMap.entrySet() ) {
            if( entry.getValue().equals( value ) ) {
                return entry.getKey();
            }
        }

        return INVALID;
    }

}
